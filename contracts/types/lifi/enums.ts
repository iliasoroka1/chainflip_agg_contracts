import { ChainId, ChainKey, CoinKey, getChainById, getChainByKey } from "@lifi/sdk";
import { ChainIdExt, ChainKeyExt, combChainId, CombChainKey } from "../token";

export const stringToCoinKey = (coinKey: string): CoinKey => {
    if (coinKey.slice(0, 3).toLowerCase() !== "cbt" && coinKey.slice(0, 2).toLowerCase() !== "sg") {
        coinKey = coinKey.toUpperCase();
    }
    switch (coinKey) {
        case "ETH":
            return CoinKey.ETH;
        case "MATIC":
            return CoinKey.MATIC;
        case "BNB":
            return CoinKey.BNB;
        case "DAI":
            return CoinKey.DAI;
        case "FTM":
            return CoinKey.FTM;
        case "OKT":
            return CoinKey.OKT;
        case "AVAX":
            return CoinKey.AVAX;
        case "HT":
            return CoinKey.HT;
        case "ONE":
            return CoinKey.ONE;
        case "FSN":
            return CoinKey.FSN;
        case "MOVR":
            return CoinKey.MOVR;
        case "EXP":
            return CoinKey.EXP;
        case "TCH":
            return CoinKey.TCH;
        case "UBQ":
            return CoinKey.UBQ;
        case "META":
            return CoinKey.META;
        case "DIODE":
            return CoinKey.DIODE;
        case "CELO":
            return CoinKey.CELO;
        case "FUSE":
            return CoinKey.FUSE;
        case "TLOS":
            return CoinKey.TLOS;
        case "CRO":
            return CoinKey.CRO;
        case "SHIB":
            return CoinKey.SHIB;
        case "L1":
            return CoinKey.L1;
        case "RBTC":
            return CoinKey.RBTC;
        case "TBG":
            return CoinKey.TBG;
        case "VLX":
            return CoinKey.VLX;
        case "GLMR":
            return CoinKey.GLMR;
        case "METIS":
            return CoinKey.METIS;
        case "SOL":
            return CoinKey.SOL;
        case "EVM":
            return CoinKey.EVM;
        case "USDT":
            return CoinKey.USDT;
        case "USDC":
            return CoinKey.USDC;
        case "cbtUSDC":
            return CoinKey.cbtUSDC;
        case "cbtUSDT":
            return CoinKey.cbtUSDT;
        case "cbtWUSDT":
            return CoinKey.cbtWUSDT;
        case "cbtWUSDC":
            return CoinKey.cbtWUSDC;
        case "cbtCELR":
            return CoinKey.cbtCELR;
        case "BUSD":
            return CoinKey.BUSD;
        case "USDCe":
            return CoinKey.USDCe;
        case "TEST":
            return CoinKey.TEST;
        case "KAL":
            return CoinKey.KAL;
        case "SDIODE":
            return CoinKey.SDIODE;
        case "SPARK":
            return CoinKey.SPARK;
        case "TRBTC":
            return CoinKey.TRBTC;
        case "CXTT":
            return CoinKey.CXTT;
        case "sgMETIS":
            return CoinKey.sgMETIS;
        case "sgWOO":
            return CoinKey.sgWOO;
        case "sgUSDT":
            return CoinKey.sgUSDT;
        case "sgBUSD":
            return CoinKey.sgBUSD;
        case "sgUSDC":
            return CoinKey.sgUSDC;
        case "WBTC":
            return CoinKey.WBTC;
        case "WETH":
            return CoinKey.WETH;
        case "SUSHI":
            return CoinKey.SUSHI;
        case "DODO":
            return CoinKey.DODO;
        case "MCB":
            return CoinKey.MCB;
        case "CELR":
            return CoinKey.CELR;
        case "IF":
            return CoinKey.IF;
        default:
            throw new Error("Invalid coin key");
    }
};


export const stringToChainKey = (chainKey: string): CombChainKey | undefined => {
    chainKey = chainKey.toLowerCase();
    switch (chainKey) {
        case "eth":
            return ChainKey.ETH;
        case "pol":
            return ChainKey.POL;
        case "bsc":
            return ChainKey.BSC;
        case "bnb":
            return ChainKey.BSC;
        case "dai":
            return ChainKey.DAI;
        case "okt":
            return ChainKey.OKT;
        case "ftm":
            return ChainKey.FTM;
        case "ava":
            return ChainKey.AVA;
        case "avax":
            return ChainKey.AVA;
        case "arb":
            return ChainKey.ARB;
        case "hec":
            return ChainKey.HEC;
        case "opt":
            return ChainKey.OPT;
        case "one":
            return ChainKey.ONE;
        case "fsn":
            return ChainKey.FSN;
        case "mor":
            return ChainKey.MOR;
        case "exp":
            return ChainKey.EXP;
        case "tch":
            return ChainKey.TCH;
        case "ubq":
            return ChainKey.UBQ;
        case "met":
            return ChainKey.MET;
        case "dio":
            return ChainKey.DIO;
        case "cel":
            return ChainKey.CEL;
        case "fus":
            return ChainKey.FUS;
        case "tlo":
            return ChainKey.TLO;
        case "cro":
            return ChainKey.CRO;
        case "bob":
            return ChainKey.BOB;
        case "shi":
            return ChainKey.SHI;
        case "gl1":
            return ChainKey.GL1;
        case "rsk":
            return ChainKey.RSK;
        case "tbw":
            return ChainKey.TBW;
        case "vel":
            return ChainKey.VEL;
        case "moo":
            return ChainKey.MOO;
        case "mam":
            return ChainKey.MAM;
        case "aur":
            return ChainKey.AUR;
        case "ter":
            return ChainKey.TER;
        case "oas":
            return ChainKey.OAS;
        case "sol":
            return ChainKey.SOL;
        case "evm":
            return ChainKey.EVM;
        case "arn":
            return ChainKey.ARN;
        case "era":
            return ChainKey.ERA;
        case "pze":
            return ChainKey.PZE;
        case "lna":
            return ChainKey.LNA;
        case "bas":
            return ChainKey.BAS;
        case "gor":
            return ChainKey.GOR;
        case "mett":
            return ChainKey.METT;
        case "diot":
            return ChainKey.DIOT;
        case "mum":
            return ChainKey.MUM;
        case "arbg":
            return ChainKey.ARBG;
        case "optg":
            return ChainKey.OPTG;
        case "bsct":
            return ChainKey.BSCT;
        case "hect":
            return ChainKey.HECT;
        case "onet":
            return ChainKey.ONET;
        case "fust":
            return ChainKey.FUST;
        case "tlot":
            return ChainKey.TLOT;
        case "rskt":
            return ChainKey.RSKT;
        case "solt":
            return ChainKey.SOLT;
        case "oast":
            return ChainKey.OAST;
        case "tert":
            return ChainKey.TERT;
        case "avat":
            return ChainKey.AVAT;
        case "evmt":
            return ChainKey.EVMT;
        case "mort":
            return ChainKey.MORT;
        case "ftmt":
            return ChainKey.FTMT;
        case "lnat":
            return ChainKey.LNAT;
        case "btc":
            return ChainKeyExt.BTC;
        case "bch":
            return ChainKeyExt.BCH;
        case "dash":
            return ChainKeyExt.DASH;
        case "doge":
            return ChainKeyExt.DOGE;
        case "gaia":
            return ChainKeyExt.GAIA;
        case "kuji":
            return ChainKeyExt.KUJI;
        case "ltc":
            return ChainKeyExt.LTC;
        case "maya":
            return ChainKeyExt.MAYA;
        case "thor":
            return ChainKeyExt.THOR;
        default:
            return undefined;
    }
};

export const chainIdToChainKey = (chainId?: combChainId): CombChainKey | undefined => {
    if (!chainId) return undefined;
    switch (chainId) {
        case ChainId.ETH:
            return ChainKey.ETH;
        case ChainId.POL:
            return ChainKey.POL;
        case ChainId.BSC:
            return ChainKey.BSC;
        case ChainId.DAI:
            return ChainKey.DAI;
        case ChainId.OKT:
            return ChainKey.OKT;
        case ChainId.FTM:
            return ChainKey.FTM;
        case ChainId.AVA:
            return ChainKey.AVA;
        case ChainId.ARB:
            return ChainKey.ARB;
        case ChainId.HEC:
            return ChainKey.HEC;
        case ChainId.OPT:
            return ChainKey.OPT;
        case ChainId.ONE:
            return ChainKey.ONE;
        case ChainId.FSN:
            return ChainKey.FSN;
        case ChainId.MOR:
            return ChainKey.MOR;
        case ChainId.EXP:
            return ChainKey.EXP;
        case ChainId.TCH:
            return ChainKey.TCH;
        case ChainId.UBQ:
            return ChainKey.UBQ;
        case ChainId.MET:
            return ChainKey.MET;
        case ChainId.DIO:
            return ChainKey.DIO;
        case ChainId.CEL:
            return ChainKey.CEL;
        case ChainId.FUS:
            return ChainKey.FUS;
        case ChainId.TLO:
            return ChainKey.TLO;
        case ChainId.CRO:
            return ChainKey.CRO;
        case ChainId.BOB:
            return ChainKey.BOB;
        case ChainId.SHI:
            return ChainKey.SHI;
        case ChainId.GL1:
            return ChainKey.GL1;
        case ChainId.RSK:
            return ChainKey.RSK;
        case ChainId.TBW:
            return ChainKey.TBW;
        case ChainId.VEL:
            return ChainKey.VEL;
        case ChainId.MOO:
            return ChainKey.MOO;
        case ChainId.MAM:
            return ChainKey.MAM;
        case ChainId.AUR:
            return ChainKey.AUR;
        case ChainId.SOL:
            return ChainKey.SOL;
        case ChainId.TER:
            return ChainKey.TER;
        case ChainId.OAS:
            return ChainKey.OAS;
        case ChainId.EVM:
            return ChainKey.EVM;
        case ChainId.ARN:
            return ChainKey.ARN;
        case ChainId.ERA:
            return ChainKey.ERA;
        case ChainId.PZE:
            return ChainKey.PZE;
        case ChainId.LNA:
            return ChainKey.LNA;
        case ChainId.BAS:
            return ChainKey.BAS;
        case ChainId.GOR:
            return ChainKey.GOR;
        case ChainId.METT:
            return ChainKey.METT;
        case ChainId.DIOT:
            return ChainKey.DIOT;
        case ChainId.MUM:
            return ChainKey.MUM;
        case ChainId.ARBG:
            return ChainKey.ARBG;
        case ChainId.OPTG:
            return ChainKey.OPTG;
        case ChainId.BSCT:
            return ChainKey.BSCT;
        case ChainId.HECT:
            return ChainKey.HECT;
        case ChainId.ONET:
            return ChainKey.ONET;
        case ChainId.FUST:
            return ChainKey.FUST;
        case ChainId.TLOT:
            return ChainKey.TLOT;
        case ChainId.RSKT:
            return ChainKey.RSKT;
        case ChainId.SOLT:
            return ChainKey.SOLT;
        case ChainId.TERT:
            return ChainKey.TERT;
        case ChainId.OAST:
            return ChainKey.OAST;
        case ChainId.AVAT:
            return ChainKey.AVAT;
        case ChainId.EVMT:
            return ChainKey.EVMT;
        case ChainId.MORT:
            return ChainKey.MORT;
        case ChainId.FTMT:
            return ChainKey.FTMT;
        case ChainId.LNAT:
            return ChainKey.LNAT;
        case ChainIdExt.BCH:
            return ChainKeyExt.BCH;
        case ChainIdExt.BTC:
            return ChainKeyExt.BTC;
        case ChainIdExt.DASH:
            return ChainKeyExt.DASH;
        case ChainIdExt.DOGE:
            return ChainKeyExt.DOGE;
        case ChainIdExt.GAIA:
            return ChainKeyExt.GAIA;
        case ChainIdExt.KUJI:
            return ChainKeyExt.KUJI;
        case ChainIdExt.LTC:
            return ChainKeyExt.LTC;
        case ChainIdExt.MAYA:
            return ChainKeyExt.MAYA;
        case ChainIdExt.THOR:
            return ChainKeyExt.THOR;
        default:
            {
                try {
                    return getChainById(chainId).key;
                } catch (e) {
                    return undefined;
                }
            }
    }
}

export const chainKeyToChainId = (chainKey: CombChainKey): combChainId | undefined => {
    const key = chainKey.toLowerCase();
    switch (key) {
        case ChainKey.ETH:
            return ChainId.ETH;
        case ChainKey.POL:
            return ChainId.POL;
        case ChainKey.BSC:
            return ChainId.BSC;
        case ChainKey.DAI:
            return ChainId.DAI;
        case ChainKey.OKT:
            return ChainId.OKT;
        case ChainKey.FTM:
            return ChainId.FTM;
        case ChainKey.AVA:
            return ChainId.AVA;
        case ChainKey.ARB:
            return ChainId.ARB;
        case ChainKey.HEC:
            return ChainId.HEC;
        case ChainKey.OPT:
            return ChainId.OPT;
        case ChainKey.ONE:
            return ChainId.ONE;
        case ChainKey.FSN:
            return ChainId.FSN;
        case ChainKey.MOR:
            return ChainId.MOR;
        case ChainKey.EXP:
            return ChainId.EXP;
        case ChainKey.TCH:
            return ChainId.TCH;
        case ChainKey.UBQ:
            return ChainId.UBQ;
        case ChainKey.MET:
            return ChainId.MET;
        case ChainKey.DIO:
            return ChainId.DIO;
        case ChainKey.CEL:
            return ChainId.CEL;
        case ChainKey.FUS:
            return ChainId.FUS;
        case ChainKey.TLO:
            return ChainId.TLO;
        case ChainKey.CRO:
            return ChainId.CRO;
        case ChainKey.BOB:
            return ChainId.BOB;
        case ChainKey.SHI:
            return ChainId.SHI;
        case ChainKey.GL1:
            return ChainId.GL1;
        case ChainKey.RSK:
            return ChainId.RSK;
        case ChainKey.TBW:
            return ChainId.TBW;
        case ChainKey.VEL:
            return ChainId.VEL;
        case ChainKey.MOO:
            return ChainId.MOO;
        case ChainKey.MAM:
            return ChainId.MAM;
        case ChainKey.AUR:
            return ChainId.AUR;
        case ChainKey.SOL:
            return ChainId.SOL;
        case ChainKey.TER:
            return ChainId.TER;
        case ChainKey.OAS:
            return ChainId.OAS;
        case ChainKey.EVM:
            return ChainId.EVM;
        case ChainKey.ARN:
            return ChainId.ARN;
        case ChainKey.ERA:
            return ChainId.ERA;
        case ChainKey.PZE:
            return ChainId.PZE;
        case ChainKey.LNA:
            return ChainId.LNA;
        case ChainKey.BAS:
            return ChainId.BAS;
        case ChainKey.GOR:
            return ChainId.GOR;
        case ChainKey.METT:
            return ChainId.METT;
        case ChainKey.DIOT:
            return ChainId.DIOT;
        case ChainKey.MUM:
            return ChainId.MUM;
        case ChainKey.ARBG:
            return ChainId.ARBG;
        case ChainKey.OPTG:
            return ChainId.OPTG;
        case ChainKey.BSCT:
            return ChainId.BSCT;
        case ChainKey.HECT:
            return ChainId.HECT;
        case ChainKey.ONET:
            return ChainId.ONET;
        case ChainKey.FUST:
            return ChainId.FUST;
        case ChainKey.TLOT:
            return ChainId.TLOT;
        case ChainKey.RSKT:
            return ChainId.RSKT;
        case ChainKey.SOLT:
            return ChainId.SOLT;
        case ChainKey.TERT:
            return ChainId.TERT;
        case ChainKey.OAST:
            return ChainId.OAST;
        case ChainKey.AVAT:
            return ChainId.AVAT;
        case ChainKey.EVMT:
            return ChainId.EVMT;
        case ChainKey.MORT:
            return ChainId.MORT;
        case ChainKey.FTMT:
            return ChainId.FTMT;
        case ChainKey.LNAT:
            return ChainId.LNAT;
        case ChainKeyExt.BCH:
            return ChainIdExt.BCH;
        case ChainKeyExt.BTC:
            return ChainIdExt.BTC;
        case ChainKeyExt.DASH:
            return ChainIdExt.DASH;
        case ChainKeyExt.DOGE:
            return ChainIdExt.DOGE;
        case ChainKeyExt.GAIA:
            return ChainIdExt.GAIA;
        case ChainKeyExt.KUJI:
            return ChainIdExt.KUJI;
        case ChainKeyExt.LTC:
            return ChainIdExt.LTC;
        case ChainKeyExt.MAYA:
            return ChainIdExt.MAYA;
        case ChainKeyExt.THOR:
            return ChainIdExt.THOR;
        case ChainKeyExt.AVAX:
            return ChainId.AVA;
        default:
            {
                try {
                    return getChainByKey(key as ChainKey).id;
                } catch (e) {
                    return undefined;
                }
            }
    }
}
